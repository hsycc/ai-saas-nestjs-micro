syntax = "proto3";

import "google/protobuf/empty.proto";

package grpc.ai.v1;

service AiSpeechService {
  rpc CreateTranscription(CreateTranscriptionRequest)
      returns (CreateTranscriptionResponse) {}
}

message CreateTranscriptionRequest {
  bytes buffer = 1;
  optional string prompt = 2;
  optional int32 temperature = 3;
  optional string language_code = 4;
}

// alias openai CreateTranscriptionResponse
message CreateTranscriptionResponse { string text = 1; }

service AiChatModelService {
  rpc CreateChatModel(CreateChatModelRequest) returns (ChatModel);

  rpc DeleteChatModel(QueryChatModelByIdRequest)
      returns (google.protobuf.Empty);

  rpc UpdateChatModel(UpdateChatModelRequest) returns (google.protobuf.Empty);

  rpc GetChatModelById(QueryChatModelByIdRequest) returns (ChatModel);
  rpc GetChatModelList(QueryChatModelListRequest) returns (ChatModelList);

  rpc CreateChatCompletion(CreateChatCompletionRequest)
      returns (CreateChatCompletionChoicesResponse);
}

enum StatusEnum {
  DISABLE = 0;
  ENABLE = 1;
}

message Pagination {
  int32 current = 1;
  int32 pageSize = 2;
  int32 total = 3;
}

message ChatModel {
  string id = 1;
  string provider = 2;
  string model = 3;
  string name = 4;
  repeated ChatModelStructItem struct = 5;
  string questionTpl = 6;
  StatusEnum status = 7;
  string userId = 8;
  double createdAt = 9;
  double updatedAt = 10;
}

message CreateChatModelRequest {
  optional string provider = 2;
  optional string model = 3;
  string name = 4;
  repeated ChatModelStructItem struct = 5;
  optional string questionTpl = 6;
}

message ChatModelStructItem {
  string key = 1;
  string value = 2;
}

message UpdateChatModelRequest {
  string id = 1;
  optional string name = 4;
  repeated ChatModelStructItem struct = 5;
  optional string questionTpl = 6;
}

message ChatModelList {
  repeated ChatModel results = 1;
  Pagination pagination = 2;
}

message QueryChatModelByIdRequest { string id = 1; }

message QueryChatModelListRequest {
  optional int32 current = 1;
  optional int32 pageSize = 2;
}

// alias openai ChatCompletionRequestMessage
message ChatCompletionRequestMessage {
  optional string role = 1;
  optional string content = 2;
  optional string name = 3;
}

message CreateChatCompletionRequest {
  optional string chaModelId = 1;
  string question = 2;
  repeated ChatCompletionRequestMessage messages = 3;
}

// alias openai CreateChatCompletionResponseChoicesInner
message CreateChatCompletionResponseChoicesInner {
  optional int32 index = 1;
  optional ChatCompletionRequestMessage message = 2;
  optional string finish_reason = 3;
}

message CreateChatCompletionChoicesResponse {
  repeated CreateChatCompletionResponseChoicesInner choices = 1;
}
