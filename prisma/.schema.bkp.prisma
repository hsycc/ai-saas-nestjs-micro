// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// [测试 multiSchema](https://www.prisma.io/docs/guides/other/multi-schema#learn-more-about-the-multischema-preview-feature)
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE")
  schemas  = ["auth", "gpt"]
}

enum UserStatus {
  ENABLE
  DISABLE

  @@schema("auth")
}

enum UserRole {
  USER
  ADMIN

  @@schema("auth")
}

model User {
  id          String      @id @default(cuid())
  username    String      @unique @db.VarChar(50)
  avatar      String?
  password    String
  status      UserStatus  @default(ENABLE)
  role        UserRole    @default(USER)
  public_key  String?
  private_key String? // encryptedPrivateKey
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  ChatModel   ChatModel[]

  @@map("user")
  @@schema("auth")
}

model ChatModel {
  id          String   @id @default(cuid())
  provider    String?  @default("chatgpt") @db.VarChar(50)
  model       String?  @default("gpt-3.5-turbo'") @db.VarChar(50)
  name        String   @db.VarChar(50) // 会话形象名称
  struct      Json?
  questionTpl String?  @default("%question%") @map("question_tpl")
  userId      String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  useId       User?    @relation(fields: [userId], references: [id])

  @@map("chat_model")
  @@schema("gpt")
}
